{"timestamp":"2025-08-07T10:45:32.477430","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-08-07T10:45:32.477943","level":"info","event":"Filling up the DagBag from /home/cnguyen/myrepos/dbt-postgres-airflow/airflow/dags/api-weather.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-08-07T10:45:32.520417Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-07T10:45:32.520544Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-07T10:45:32.520683Z","level":"info","event":"Current task name:ingest_weather_data","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-07T10:45:32.520730Z","level":"info","event":"Dag name:data_weather_fetch_daily","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-07T10:45:32.522570","level":"info","event":"Fetching data from WeatherStack API","logger":"helper_function"}
{"timestamp":"2025-08-07T10:45:33.271739","level":"info","event":"API response received successfully !!!","logger":"helper_function"}
{"timestamp":"2025-08-07T10:45:33.272092","level":"info","event":"Connecting to PostgreSQL database","logger":"helper_function"}
{"timestamp":"2025-08-07T10:45:33.277855","level":"info","event":"Connected to PostgreSQL database successfully !!!","logger":"helper_function"}
{"timestamp":"2025-08-07T10:45:33.277987","level":"info","event":"Creating schema and table if not exists in PostgreSQL","logger":"helper_function"}
{"timestamp":"2025-08-07T10:45:33.279519","level":"info","event":"Schema and table created successfully !!!","logger":"helper_function"}
{"timestamp":"2025-08-07T10:45:33.279592","level":"info","event":"Inserting data into PostgreSQL table","logger":"helper_function"}
{"timestamp":"2025-08-07T10:45:33.282245","level":"info","event":"Data inserted successfully !!!","logger":"helper_function"}
{"timestamp":"2025-08-07T10:45:33.282393","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-08-07T10:45:33.309849Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-07T10:45:33.310013Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-07T10:45:33.310200Z","level":"info","event":"Task operator:<Task(PythonOperator): ingest_weather_data>","chan":"stdout","logger":"task"}
