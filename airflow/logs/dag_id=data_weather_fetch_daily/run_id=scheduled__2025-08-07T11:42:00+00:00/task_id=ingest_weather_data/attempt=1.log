{"timestamp":"2025-08-07T11:44:01.863369","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-08-07T11:44:01.863883","level":"info","event":"Filling up the DagBag from /home/cnguyen/myrepos/dbt-postgres-airflow/airflow/dags/api-weather.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-08-07T11:44:01.909441Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-07T11:44:01.909558Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-07T11:44:01.909688Z","level":"info","event":"Current task name:ingest_weather_data","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-07T11:44:01.909783Z","level":"info","event":"Dag name:data_weather_fetch_daily","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-07T11:44:01.911201","level":"info","event":"Fetching data from WeatherStack API","logger":"helper_function"}
{"timestamp":"2025-08-07T11:44:02.770479","level":"info","event":"API response received successfully !!!","logger":"helper_function"}
{"timestamp":"2025-08-07T11:44:02.770802","level":"info","event":"Connecting to PostgreSQL database","logger":"helper_function"}
{"timestamp":"2025-08-07T11:44:02.776261","level":"info","event":"Connected to PostgreSQL database successfully !!!","logger":"helper_function"}
{"timestamp":"2025-08-07T11:44:02.776359","level":"info","event":"Creating schema and table if not exists in PostgreSQL","logger":"helper_function"}
{"timestamp":"2025-08-07T11:44:02.777805","level":"info","event":"Schema and table created successfully !!!","logger":"helper_function"}
{"timestamp":"2025-08-07T11:44:02.777887","level":"info","event":"Inserting data into PostgreSQL table","logger":"helper_function"}
{"timestamp":"2025-08-07T11:44:02.780522","level":"info","event":"Data inserted successfully !!!","logger":"helper_function"}
{"timestamp":"2025-08-07T11:44:02.780666","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-08-07T11:44:02.803098Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-07T11:44:02.803220Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-07T11:44:02.803335Z","level":"info","event":"Task operator:<Task(PythonOperator): ingest_weather_data>","chan":"stdout","logger":"task"}
