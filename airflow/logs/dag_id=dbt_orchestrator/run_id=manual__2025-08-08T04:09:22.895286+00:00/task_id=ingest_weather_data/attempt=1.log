{"timestamp":"2025-08-08T04:09:26.703402","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-08-08T04:09:26.704358","level":"info","event":"Filling up the DagBag from /home/cnguyen/myrepos/dbt-postgres-airflow/airflow/dags/dbt-orchesstrator.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-08-08T04:09:26.875091Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-08T04:09:26.875311Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-08T04:09:26.875651Z","level":"info","event":"Current task name:ingest_weather_data","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-08T04:09:26.875758Z","level":"info","event":"Dag name:dbt_orchestrator","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-08T04:09:26.887661","level":"info","event":"Connecting to PostgreSQL database","logger":"helper_function"}
{"timestamp":"2025-08-08T04:09:26.942765","level":"info","event":"Connected to PostgreSQL database successfully !!!","logger":"helper_function"}
{"timestamp":"2025-08-08T04:09:26.942959","level":"info","event":"Creating schema and table if not exists in PostgreSQL","logger":"helper_function"}
{"timestamp":"2025-08-08T04:09:27.002652","level":"info","event":"Schema and table created successfully !!!","logger":"helper_function"}
{"timestamp":"2025-08-08T04:09:27.003742","level":"info","event":"Fetching data from WeatherStack API","logger":"helper_function"}
{"timestamp":"2025-08-08T04:09:28.004008","level":"info","event":"API response received successfully !!!","logger":"helper_function"}
{"timestamp":"2025-08-08T04:09:28.004511","level":"info","event":"Inserting data into PostgreSQL table","logger":"helper_function"}
{"timestamp":"2025-08-08T04:09:28.015820","level":"info","event":"Fetched data for London successfully !!!","logger":"helper_function"}
{"timestamp":"2025-08-08T04:09:38.028728","level":"info","event":"Fetching data from WeatherStack API","logger":"helper_function"}
{"timestamp":"2025-08-08T04:09:38.942769","level":"info","event":"API response received successfully !!!","logger":"helper_function"}
{"timestamp":"2025-08-08T04:09:38.943340","level":"info","event":"Inserting data into PostgreSQL table","logger":"helper_function"}
{"timestamp":"2025-08-08T04:09:38.951931","level":"info","event":"Fetched data for Singapore successfully !!!","logger":"helper_function"}
{"timestamp":"2025-08-08T04:09:48.958712","level":"info","event":"Fetching data from WeatherStack API","logger":"helper_function"}
{"timestamp":"2025-08-08T04:09:49.880226","level":"info","event":"API response received successfully !!!","logger":"helper_function"}
{"timestamp":"2025-08-08T04:09:49.880849","level":"info","event":"Inserting data into PostgreSQL table","logger":"helper_function"}
{"timestamp":"2025-08-08T04:09:49.900563","level":"info","event":"Fetched data for Shanghai successfully !!!","logger":"helper_function"}
{"timestamp":"2025-08-08T04:09:59.908805","level":"info","event":"Fetching data from WeatherStack API","logger":"helper_function"}
{"timestamp":"2025-08-08T04:10:00.312544","level":"info","event":"API response received successfully !!!","logger":"helper_function"}
{"timestamp":"2025-08-08T04:10:00.313067","level":"info","event":"Inserting data into PostgreSQL table","logger":"helper_function"}
{"timestamp":"2025-08-08T04:10:00.323684","level":"info","event":"Fetched data for New York successfully !!!","logger":"helper_function"}
{"timestamp":"2025-08-08T04:10:10.329203","level":"info","event":"Fetching data from WeatherStack API","logger":"helper_function"}
{"timestamp":"2025-08-08T04:10:11.202745","level":"info","event":"API response received successfully !!!","logger":"helper_function"}
{"timestamp":"2025-08-08T04:10:11.203250","level":"info","event":"Inserting data into PostgreSQL table","logger":"helper_function"}
{"timestamp":"2025-08-08T04:10:11.231419","level":"info","event":"Fetched data for Tokyo successfully !!!","logger":"helper_function"}
{"timestamp":"2025-08-08T04:10:21.238747","level":"info","event":"Fetching data from WeatherStack API","logger":"helper_function"}
{"timestamp":"2025-08-08T04:10:21.870634","level":"info","event":"API response received successfully !!!","logger":"helper_function"}
{"timestamp":"2025-08-08T04:10:21.871118","level":"info","event":"Inserting data into PostgreSQL table","logger":"helper_function"}
{"timestamp":"2025-08-08T04:10:21.889756","level":"info","event":"Fetched data for Berlin successfully !!!","logger":"helper_function"}
{"timestamp":"2025-08-08T04:10:31.899030","level":"info","event":"Fetching data from WeatherStack API","logger":"helper_function"}
{"timestamp":"2025-08-08T04:10:32.769651","level":"info","event":"API response received successfully !!!","logger":"helper_function"}
{"timestamp":"2025-08-08T04:10:32.770110","level":"info","event":"Inserting data into PostgreSQL table","logger":"helper_function"}
{"timestamp":"2025-08-08T04:10:32.778184","level":"info","event":"Fetched data for Hanoi successfully !!!","logger":"helper_function"}
{"timestamp":"2025-08-08T04:10:42.789258","level":"info","event":"Fetching data from WeatherStack API","logger":"helper_function"}
{"timestamp":"2025-08-08T04:10:43.672063","level":"info","event":"API response received successfully !!!","logger":"helper_function"}
{"timestamp":"2025-08-08T04:10:43.672575","level":"info","event":"Inserting data into PostgreSQL table","logger":"helper_function"}
{"timestamp":"2025-08-08T04:10:43.681892","level":"info","event":"Fetched data for Ho Chi Minh City successfully !!!","logger":"helper_function"}
{"timestamp":"2025-08-08T04:10:53.688750","level":"info","event":"Fetching data from WeatherStack API","logger":"helper_function"}
{"timestamp":"2025-08-08T04:10:54.549245","level":"info","event":"API response received successfully !!!","logger":"helper_function"}
{"timestamp":"2025-08-08T04:10:54.549759","level":"info","event":"Inserting data into PostgreSQL table","logger":"helper_function"}
{"timestamp":"2025-08-08T04:10:54.557929","level":"info","event":"Fetched data for Paris successfully !!!","logger":"helper_function"}
{"timestamp":"2025-08-08T04:11:04.568710","level":"info","event":"Fetching data from WeatherStack API","logger":"helper_function"}
{"timestamp":"2025-08-08T04:11:05.610799","level":"info","event":"API response received successfully !!!","logger":"helper_function"}
{"timestamp":"2025-08-08T04:11:05.611378","level":"info","event":"Inserting data into PostgreSQL table","logger":"helper_function"}
{"timestamp":"2025-08-08T04:11:05.622343","level":"info","event":"Fetched data for Moscow successfully !!!","logger":"helper_function"}
{"timestamp":"2025-08-08T04:11:15.627898","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-08-08T04:11:15.761160Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-08T04:11:15.761314Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-08T04:11:15.761715Z","level":"info","event":"Task operator:<Task(PythonOperator): ingest_weather_data>","chan":"stdout","logger":"task"}
