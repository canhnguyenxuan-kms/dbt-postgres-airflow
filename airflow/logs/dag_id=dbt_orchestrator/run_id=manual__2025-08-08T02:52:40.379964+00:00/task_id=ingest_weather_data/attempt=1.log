{"timestamp":"2025-08-08T02:52:42.806756","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-08-08T02:52:42.807620","level":"info","event":"Filling up the DagBag from /home/cnguyen/myrepos/dbt-postgres-airflow/airflow/dags/dbt-orchesstrator.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-08-08T02:52:43.019040Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-08T02:52:43.019307Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-08T02:52:43.023518Z","level":"info","event":"Current task name:ingest_weather_data","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-08T02:52:43.023716Z","level":"info","event":"Dag name:dbt_orchestrator","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-08T02:52:43.021870","level":"info","event":"Connecting to PostgreSQL database","logger":"helper_function"}
{"timestamp":"2025-08-08T02:52:43.040651","level":"info","event":"Connected to PostgreSQL database successfully !!!","logger":"helper_function"}
{"timestamp":"2025-08-08T02:52:43.040828","level":"info","event":"Creating schema and table if not exists in PostgreSQL","logger":"helper_function"}
{"timestamp":"2025-08-08T02:52:43.058408","level":"info","event":"Schema and table created successfully !!!","logger":"helper_function"}
{"timestamp":"2025-08-08T02:52:43.060974","level":"info","event":"Fetching data from WeatherStack API","logger":"helper_function"}
{"timestamp":"2025-08-08T02:52:44.025094","level":"info","event":"API response received successfully !!!","logger":"helper_function"}
{"timestamp":"2025-08-08T02:52:44.025550","level":"info","event":"Inserting data into PostgreSQL table","logger":"helper_function"}
{"timestamp":"2025-08-08T02:52:44.033727","level":"info","event":"Data inserted successfully !!!","logger":"helper_function"}
{"timestamp":"2025-08-08T02:52:44.034451","level":"info","event":"Fetching data from WeatherStack API","logger":"helper_function"}
{"timestamp":"2025-08-08T02:52:44.680731","level":"error","event":"APT request failed: 429 Client Error: Too Many Requests for url: https://api.weatherstack.com/current?access_key=9781a0714b015931f11061873fb8ce78&query=Singapore","logger":"helper_function","error_detail":[{"exc_type":"HTTPError","exc_value":"429 Client Error: Too Many Requests for url: https://api.weatherstack.com/current?access_key=9781a0714b015931f11061873fb8ce78&query=Singapore","exc_notes":[],"syntax_error":null,"is_cause":false,"frames":[{"filename":"/home/cnguyen/myrepos/dbt-postgres-airflow/airflow/utilities/helper_function.py","lineno":17,"name":"fetch_data_from_api"},{"filename":"/home/cnguyen/.pyenv/versions/3.10.4/envs/demo_airflow/lib/python3.10/site-packages/requests/models.py","lineno":1026,"name":"raise_for_status"}],"is_group":false,"exceptions":[]}]}
{"timestamp":"2025-08-08T02:52:44.681308","level":"error","event":"An error occurred: 429 Client Error: Too Many Requests for url: https://api.weatherstack.com/current?access_key=9781a0714b015931f11061873fb8ce78&query=Singapore","logger":"helper_function","error_detail":[{"exc_type":"HTTPError","exc_value":"429 Client Error: Too Many Requests for url: https://api.weatherstack.com/current?access_key=9781a0714b015931f11061873fb8ce78&query=Singapore","exc_notes":[],"syntax_error":null,"is_cause":false,"frames":[{"filename":"/home/cnguyen/myrepos/dbt-postgres-airflow/airflow/utilities/helper_function.py","lineno":95,"name":"main"},{"filename":"/home/cnguyen/myrepos/dbt-postgres-airflow/airflow/utilities/helper_function.py","lineno":17,"name":"fetch_data_from_api"},{"filename":"/home/cnguyen/.pyenv/versions/3.10.4/envs/demo_airflow/lib/python3.10/site-packages/requests/models.py","lineno":1026,"name":"raise_for_status"}],"is_group":false,"exceptions":[]}]}
{"timestamp":"2025-08-08T02:52:44.683466","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-08-08T02:52:44.737898Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-08T02:52:44.738097Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-08T02:52:44.738449Z","level":"info","event":"Task operator:<Task(PythonOperator): ingest_weather_data>","chan":"stdout","logger":"task"}
