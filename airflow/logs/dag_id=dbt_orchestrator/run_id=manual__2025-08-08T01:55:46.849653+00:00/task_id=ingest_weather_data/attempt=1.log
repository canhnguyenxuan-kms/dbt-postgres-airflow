{"timestamp":"2025-08-08T01:55:49.201968","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-08-08T01:55:49.203607","level":"info","event":"Filling up the DagBag from /home/cnguyen/myrepos/dbt-postgres-airflow/airflow/dags/dbt-orchesstrator.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-08-08T01:55:49.382302Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-08T01:55:49.382781Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-08T01:55:49.383350Z","level":"info","event":"Current task name:ingest_weather_data","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-08T01:55:49.383586Z","level":"info","event":"Dag name:dbt_orchestrator","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-08T01:55:49.387917","level":"info","event":"Fetching data from WeatherStack API","logger":"helper_function"}
{"timestamp":"2025-08-08T01:55:50.191583","level":"info","event":"API response received successfully !!!","logger":"helper_function"}
{"timestamp":"2025-08-08T01:55:50.192145","level":"info","event":"Connecting to PostgreSQL database","logger":"helper_function"}
{"timestamp":"2025-08-08T01:55:50.201323","level":"info","event":"Connected to PostgreSQL database successfully !!!","logger":"helper_function"}
{"timestamp":"2025-08-08T01:55:50.201804","level":"info","event":"Creating schema and table if not exists in PostgreSQL","logger":"helper_function"}
{"timestamp":"2025-08-08T01:55:50.205447","level":"info","event":"Schema and table created successfully !!!","logger":"helper_function"}
{"timestamp":"2025-08-08T01:55:50.205908","level":"info","event":"Inserting data into PostgreSQL table","logger":"helper_function"}
{"timestamp":"2025-08-08T01:55:50.220247","level":"info","event":"Data inserted successfully !!!","logger":"helper_function"}
{"timestamp":"2025-08-08T01:55:50.220583","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-08-08T01:55:50.264741Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-08T01:55:50.264884Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-08T01:55:50.265120Z","level":"info","event":"Task operator:<Task(PythonOperator): ingest_weather_data>","chan":"stdout","logger":"task"}
